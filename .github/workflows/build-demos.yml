name: Build demos
on:
  workflow_call:
    inputs:
      ref:
        description: Branch, tag or commit SHA to checkout
        required: true
        type: string
      demo-names:
        description: |
          Instead of building all demos, only build the demos specified in this list.
        required: false
        type: string
        default: ''
      save-artifact:
        description: |
          Whether to save the built demos as an artifact.
        required: false
        type: boolean
        default: true
      artifact-name:
        description: Name of the artifact containing the built demos (defaults to demo-build-{ref})
        required: false
        type: string
        default: demo-build-${{ inputs.ref }}
      keep-going:
        description: Whether to keep going if a demo fails to build
        required: false
        type: boolean
        default: false
      quiet:
        description: |
          Whether to suppress output from the build process
        required: false
        type: boolean
        default: false
      batch_size:
        description: |
          Number of demos to build per job
        type: number
        default: 10
    outputs:
      artifact-name:
        description: "Name of the artifact containing the built demos"
        value: ${{ inputs.artifact-name }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      chunk-array: ${{ steps.get-chunk-array.outputs.chunk-array }}
      chunk-indexes: ${{ steps.get-chunk-array.outputs.chunk-indexes }}
    steps:
      - name: Create job chunk array
        id: get-chunk-array
        run: printf "chunk-array=%s" $(jq -nc '[$ARGS.positional | _nwise(${{ inputs.batch_size }})]' --args ${{ inputs.demo-names }})
      - name: Get chunk indexes
        id: get-chunk-indexes
        run: printf "chunk-indexes=%s" $(jq -nc '${{ steps.get-chunk-array.outputs.chunk-array }} | [range(0, length)]')

  build-demos:
    runs-on: ubuntu-latest
    needs: [generate-matrix]
    strategy:
      matrix:
        chunk-index: ${{ fromJson(needs.generate-matrix.outputs.chunk-indexes) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 1

      - name: Install pandoc and opencl
        run: |
          sudo apt-get install -y \
            ocl-icd-opencl-dev \
            pandoc 

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install . && poetry config warnings.export false
      
      - name: Make demo name list
        id: demo-name-list
        run: printf "demo-names=%s" $(jq -nc '${{ needs.generate-matrix.outputs.chunk-array }}[${{ matrix.chunk-index }}]' | tr -s '\n"' ' ')

      - name: Build demos
        run: |
          qml build \
            --format json \
            --execute \
            ${{ inputs.keep-going && '--keep-going' || '--no-keep-going' }} \
            ${{ inputs.quiet && '--quiet' || '--no-quiet' }} \
            ${{ steps.demo-name-list.outputs.demo-names }}
      
      - name: Upload artifacts
        id: upload-artifacts
        if: ${{ inputs.save-artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: _build/pack/*.zip
          retention-days: 1
          overwrite: true
