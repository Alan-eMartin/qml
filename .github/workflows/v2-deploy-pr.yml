name: V2 Deploy PR

on:
  workflow_run:
    workflows:
      - "V2 Build PR"
    types:
      - completed

permissions:
  actions: read
  pull-requests: write # Required to post comments
  contents: read

concurrency:
  group: deploy-v2-demos-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  retrieve-build-info:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout`
        uses: actions/checkout@v4

      - name: Download Build Context
        uses: XanaduAI/cloud-actions/download-github-workflow-artifact@main
        with:
          workflow_run_id: ${{ github.event.workflow_run.id }}
          artifact_name_regex: '^build-info$'
          github_token: ${{ github.token }}

      # If file is missing, then likely the PR build was skipped
      - name: Check if Build Context file exists
        id: build_context
        env:
          context_artifact_file_name: build-info.zip
        run: |
          if test -f "$context_artifact_file_name"; then
            echo "result=$context_artifact_file_name" >> $GITHUB_OUTPUT
          fi
      
      - name: Unpack Build Information
        if: steps.build_context.outputs.result != ''
        run: |
          unzip ${{ steps.build_context.outputs.result }}

      - name: Read Build Information
        id: read_build_info
        if: steps.build_context.outputs.result != ''
        uses: actions/github-script@v6
        # The build info is a txt file that is similar to env file
        # PR_NUMBER=1234
        # UPDATED_DEMOS=demo1 demo2
        # COMMIT_SHA=abcd1234
        with:
          script: |
            const fs = require('fs');
            const buildData = fs.readFileSync('build-info.txt', 'utf8');
            const lines = buildData.split('\n');
            const buildInfo = {};
            for (const line of lines) {
              const [key, value] = line.split('=');
              if (key && value) {
                buildInfo[key.trim()] = value.trim();
              }
            }
            return buildInfo;

      - name: Create PR comment
        id: create-pr-comment
        run: |
          echo "Creating PR comment for PR #${{ steps.read_build_info.outputs.result.PR_NUMBER }}"
          echo "## Build Info" > pr-comment.md
          echo "### Updated Demos" >> pr-comment.md
          echo "<details>" >> pr-comment.md
          echo "<summary>Click to see all demo previews</summary>" >> pr-comment.md
          echo "" >> pr-comment.md
          IFS=' ' read -r -a demos <<< "${{ steps.read_build_info.outputs.result.UPDATED_DEMOS }}"
          for demo in "${demos[@]}"; do
            echo "- [${demo}](https://pennylane.ai/qml/demos/${demo}?preview=true)" >> pr-comment.md
          done
          echo "</details>" >> pr-comment.md

      - name: Comment on PR
        uses: XanaduAI/cloud-actions/create-and-update-pull-request-comment@main
        with:
          github_token: ${{ github.token }}
          pull_request_number: ${{ steps.read_build_info.outputs.result.PR_NUMBER }}
          comment_body: $(cat pr-comment.md)
