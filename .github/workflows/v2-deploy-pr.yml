name: V2 Deploy PR

on:
  workflow_run:
    workflows:
      - "V2 Build PR"
    types:
      - completed

permissions:
  actions: read
  pull-requests: write # Required to post comments
  contents: read

concurrency:
  group: deploy-v2-demos-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download Build Context
        uses: XanaduAI/cloud-actions/download-github-workflow-artifact@main
        with:
          workflow_run_id: ${{ github.event.workflow_run.id }}
          artifact_name_regex: '^pr_info$'
          github_token: ${{ github.token }}

      - name: Check if Build Context file exists
        id: build_context
        env:
          context_artifact_file_name: pr_info.zip
        run: |
          if test -f "$context_artifact_file_name"; then
            echo "result=$context_artifact_file_name" >> $GITHUB_OUTPUT
          fi

      - name: Unpack Build Information
        if: steps.build_context.outputs.result != ''
        run: |
          unzip ${{ steps.build_context.outputs.result }}

      - name: Read Build Information
        id: read_build_info
        if: steps.build_context.outputs.result != ''
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            const buildData = fs.readFileSync('pr_info.json');
            return JSON.parse(buildData);

      - name: Parse Pull Request Event Information
        id: pr_info
        if: github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        run: |
          PR_ID=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.id')
          PR_ID_NO_QUOTE="${PR_ID%\"}"
          PR_ID_NO_QUOTE="${PR_ID_NO_QUOTE#\"}"
          echo "pr_id => $PR_ID_NO_QUOTE"
          echo "pr_id=$PR_ID_NO_QUOTE" >> $GITHUB_OUTPUTx

          PR_REF=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.ref')
          PR_REF_NO_QUOTE="${PR_REF%\"}"
          PR_REF_NO_QUOTE="${PR_REF_NO_QUOTE#\"}"
          echo "pr_ref => $PR_REF_NO_QUOTE"
          echo "pr_ref=$PR_REF_NO_QUOTE" >> $GITHUB_OUTPUT
          
          PR_REF_NAME=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.ref_name')
          PR_REF_NAME_NO_QUOTE="${PR_REF_NAME%\"}"
          PR_REF_NAME_NO_QUOTE="${PR_REF_NAME_NO_QUOTE#\"}"
          echo "pr_ref_name => $PR_REF_NAME_NO_QUOTE"
          echo "pr_ref_name=$PR_REF_NAME_NO_QUOTE" >> $GITHUB_OUTPUT

          UPDATED_DEMOS=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.updated_demos')
          DELETED_DEMOS=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.deleted_demos')
          echo "updated_demos => $UPDATED_DEMOS"
          echo "deleted_demos => $DELETED_DEMOS"

      - name: Upsert demos
        uses: ./.github/workflows/v2-deploy-demos.yml
        with:
          environment: 'swc-staging' # Update this to production later if needed
          artifact-name: demo-build-${{ steps.pr_info.outputs.pr_ref }}
          preview: true
          branch: ${{ steps.pr_info.outputs.pr_ref_name }}
          secrets: inherit

      - name: log updated and deleted demos for testing
        run: |
          echo "Updated Demos: ${{ steps.pr_info.outputs.updated_demos }}"
          echo "Deleted Demos: ${{ steps.pr_info.outputs.deleted_demos }}"
          echo "PR ID: ${{ steps.pr_info.outputs.pr_id }}"
          echo "PR Ref: ${{ steps.pr_info.outputs.pr_ref }}"
          echo "PR Ref Name: ${{ steps.pr_info.outputs.pr_ref_name }}"