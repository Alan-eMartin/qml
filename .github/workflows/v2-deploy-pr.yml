name: V2 Deploy PR

on:
  workflow_run:
    workflows:
      - "V2 Build PR"
    types:
      - completed

permissions:
  actions: read
  pull-requests: write
  contents: read

concurrency:
  group: deploy-v2-demos-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  prepare-build-context:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download Build Context
        uses: XanaduAI/cloud-actions/download-github-workflow-artifact@main
        with:
          workflow_run_id: ${{ github.event.workflow_run.id }}
          artifact_name_regex: '^pr_info$'
          github_token: ${{ github.token }}

      - name: Check if Build Context file exists
        id: build_context
        env:
          context_artifact_file_name: pr_info.zip
        run: |
          if test -f "$context_artifact_file_name"; then
            echo "result=$context_artifact_file_name" >> $GITHUB_OUTPUT
          fi

      - name: Unpack Build Information
        if: steps.build_context.outputs.result != ''
        run: unzip ${{ steps.build_context.outputs.result }}

      - name: Read Build Information
        id: read_build_info
        if: steps.build_context.outputs.result != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const buildData = fs.readFileSync('pr_info.json', 'utf8');
            return JSON.parse(buildData);

      - name: Parse Pull Request Event Information
        id: pr_info
        if: github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        run: |
          echo '${{ steps.read_build_info.outputs.result }}' | jq -r '.id' > pr_id.txt
          echo '${{ steps.read_build_info.outputs.result }}' | jq -r '.ref' > pr_ref.txt
          echo '${{ steps.read_build_info.outputs.result }}' | jq -r '.ref_name' > pr_ref_name.txt
          echo '${{ steps.read_build_info.outputs.result }}' | jq -c '.updated_demos' > updated_demos.json
          echo '${{ steps.read_build_info.outputs.result }}' | jq -c '.deleted_demos' > deleted_demos.json

          echo "pr_id=$(cat pr_id.txt)" >> $GITHUB_OUTPUT
          echo "pr_ref=$(cat pr_ref.txt)" >> $GITHUB_OUTPUT
          echo "pr_ref_name=$(cat pr_ref_name.txt)" >> $GITHUB_OUTPUT
          echo "updated_demos=$(cat updated_demos.json)" >> $GITHUB_OUTPUT
          echo "deleted_demos=$(cat deleted_demos.json)" >> $GITHUB_OUTPUT

      - name: Set job outputs
        if: github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        id: set_job_outputs
        run: |
          echo "pr_id=${{ steps.pr_info.outputs.pr_id }}" >> $GITHUB_OUTPUT
          echo "pr_ref=${{ steps.pr_info.outputs.pr_ref }}" >> $GITHUB_OUTPUT
          echo "pr_ref_name=${{ steps.pr_info.outputs.pr_ref_name }}" >> $GITHUB_OUTPUT
          echo "updated_demos=${{ steps.pr_info.outputs.updated_demos }}" >> $GITHUB_OUTPUT
          echo "deleted_demos=${{ steps.pr_info.outputs.deleted_demos }}" >> $GITHUB_OUTPUT
    outputs:
      pr_id: ${{ steps.set_job_outputs.outputs.pr_id }}
      pr_ref: ${{ steps.set_job_outputs.outputs.pr_ref }}
      pr_ref_name: ${{ steps.set_job_outputs.outputs.pr_ref_name }}
      updated_demos: ${{ steps.set_job_outputs.outputs.updated_demos }}
      deleted_demos: ${{ steps.set_job_outputs.outputs.deleted_demos }}

  # upsert-demos:
  #   uses: ./.github/workflows/v2-deploy-demos.yml
  #   needs: prepare-build-context
  #   with:
  #     environment: 'swc-staging'
  #     preview: true
  #     branch: ${{ needs.prepare-build-context.outputs.pr_ref_name }}
  #     artifact-name: demo-build-${{ needs.prepare-build-context.outputs.pr_ref }}
  #   secrets: inherit

  post-pr-comment:
    runs-on: ubuntu-latest
    needs: prepare-build-context
    if: github.event.workflow_run.event == 'pull_request' && needs.prepare-build-context.outputs != ''
    steps:
      - name: Create comment markdown
        id: create-comment
        run: |
          echo "### Your PR preview(s) is ready!" > comment.md
          echo "You can view your preview(s) at the following link(s):" >> comment.md
          echo "" >> comment.md
          echo "#### Updated Demos" >> comment.md
          echo "" >> comment.md
          echo "<details>" >> comment.md
          echo "<summary>Click to expand</summary>" >> comment.md
          echo "" >> comment.md
          for demo in $(echo "${{ needs.prepare-build-context.outputs.updated_demos }}" | jq -r '.[]'); do
            echo "* [${demo}](https://pennylane.ai/qml/demos/${demo}?preview=true)" >> comment.md
          done
          echo "" >> comment.md
          echo "</details>" >> comment.md
          echo "" >> comment.md

      - name: Comment on PR
        id: comment-on-pr
        uses: XanaduAI/cloud-actions/create-and-update-pull-request-comment@main
        with:
          github_token: ${{ github.token }}
          pull_request_number: ${{ needs.prepare-build-context.outputs.pr_id }}
          comment_body: "$(cat comment.md)"